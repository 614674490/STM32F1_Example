##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               15/May/2008  12:06:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  thumb                                                #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM        #
#                       Encoder\example\FWLib\src\stm32f10x_bkp.c            #
#    Command line    =  "C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM       #
#                       Encoder\example\FWLib\src\stm32f10x_bkp.c" -D        #
#                       VECT_TAB_FLASH -lcN "C:\David JIANG\ST               #
#                       MCU\Docs\STM32\AN_JIANG\TIM                          #
#                       Encoder\example\project\EWARM\BOOT_FLASH\List\" -lb  #
#                       "C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM       #
#                       Encoder\example\project\EWARM\BOOT_FLASH\List\" -o   #
#                       "C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM       #
#                       Encoder\example\project\EWARM\BOOT_FLASH\Obj\" -z3   #
#                       --no_cse --no_unroll --no_inline --no_code_motion    #
#                       --no_tbaa --no_clustering --no_scheduling --debug    #
#                       --cpu_mode thumb --endian little --cpu cortex-M3     #
#                       --stack_align 4 --require_prototypes --fpu None      #
#                       --dlib_config "C:\Program Files\IAR                  #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl7mptnnl8f.h" -I "C:\David JIANG\ST     #
#                       MCU\Docs\STM32\AN_JIANG\TIM                          #
#                       Encoder\example\project\EWARM\" -I "C:\David         #
#                       JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM                 #
#                       Encoder\example\project\EWARM\..\include\" -I        #
#                       "C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM       #
#                       Encoder\example\project\EWARM\..\..\FWLib\inc\" -I   #
#                       "C:\Program Files\IAR Systems\Embedded Workbench     #
#                       4.0\arm\INC\"                                        #
#    List file       =  C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM        #
#                       Encoder\example\project\EWARM\BOOT_FLASH\List\stm32f #
#                       10x_bkp.lst                                          #
#    Object file     =  C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM        #
#                       Encoder\example\project\EWARM\BOOT_FLASH\Obj\stm32f1 #
#                       0x_bkp.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

C:\David JIANG\ST MCU\Docs\STM32\AN_JIANG\TIM Encoder\example\FWLib\src\stm32f10x_bkp.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : stm32f10x_bkp.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 09/29/2006
      5          * Description        : This file provides all the BKP firmware functions.
      6          ********************************************************************************
      7          * History:
      8          * 05/21/2007: V0.3
      9          * 04/02/2007: V0.2
     10          * 02/05/2007: V0.1
     11          * 09/29/2006: V0.01
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *******************************************************************************/
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32f10x_bkp.h"
     23          #include "stm32f10x_rcc.h"
     24          
     25          /* Private typedef -----------------------------------------------------------*/
     26          /* Private define ------------------------------------------------------------*/
     27          /* ------------ BKP registers bit address in the alias region ----------- */
     28          #define BKP_OFFSET        (BKP_BASE - PERIPH_BASE)
     29          
     30          /* --- RTCCR Register ---*/
     31          /* Alias word address of CCO bit */
     32          #define RTCCR_OFFSET      (BKP_OFFSET + 0x2C)
     33          #define CCO_BitNumber     0x07
     34          #define RTCCR_CCO_BB      (PERIPH_BB_BASE + (RTCCR_OFFSET * 32) + (CCO_BitNumber * 4))
     35          
     36          /* --- CR Register ---*/
     37          /* Alias word address of TPAL bit */
     38          #define CR_OFFSET         (BKP_OFFSET + 0x30)
     39          #define TPAL_BitNumber    0x01
     40          #define CR_TPAL_BB        (PERIPH_BB_BASE + (CR_OFFSET * 32) + (TPAL_BitNumber * 4))
     41          
     42          /* Alias word address of TPE bit */
     43          #define TPE_BitNumber     0x00
     44          #define CR_TPE_BB         (PERIPH_BB_BASE + (CR_OFFSET * 32) + (TPE_BitNumber * 4))
     45          
     46          /* --- CSR Register ---*/
     47          /* Alias word address of TPIE bit */
     48          #define CSR_OFFSET        (BKP_OFFSET + 0x34)
     49          #define TPIE_BitNumber    0x02
     50          #define CSR_TPIE_BB       (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TPIE_BitNumber * 4))
     51          
     52          /* Alias word address of TIF bit */
     53          #define TIF_BitNumber     0x09
     54          #define CSR_TIF_BB        (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TIF_BitNumber * 4))
     55          
     56          /* Alias word address of TEF bit */
     57          #define TEF_BitNumber     0x08
     58          #define CSR_TEF_BB        (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TEF_BitNumber * 4))
     59          
     60          
     61          /* ---------------------- BKP registers bit mask ------------------------ */
     62          /* RTCCR register bit mask */
     63          #define RTCCR_CAL_Mask    ((u16)0xFF80)
     64          
     65          /* CSR register bit mask */
     66          #define CSR_CTE_Set       ((u16)0x0001)
     67          #define CSR_CTI_Set       ((u16)0x0002)
     68          
     69          /* Private macro -------------------------------------------------------------*/
     70          /* Private variables ---------------------------------------------------------*/
     71          /* Private function prototypes -----------------------------------------------*/
     72          /* Private functions ---------------------------------------------------------*/
     73          
     74          /*******************************************************************************
     75          * Function Name  : BKP_DeInit
     76          * Description    : Deinitializes the BKP peripheral registers to their default
     77          *                  reset values.
     78          * Input          : None
     79          * Output         : None
     80          * Return         : None
     81          *******************************************************************************/
     82          void BKP_DeInit(void)
     83          {
     84            RCC_BackupResetCmd(ENABLE);
     85            RCC_BackupResetCmd(DISABLE);
     86          }
     87          
     88          /*******************************************************************************
     89          * Function Name  : BKP_TamperPinLevelConfig
     90          * Description    : Configures the Tamper Pin active level.
     91          * Input          : - BKP_TamperPinLevel: specifies the Tamper Pin active level.
     92          *                    This parameter can be one of the following values:
     93          *                       - BKP_TamperPinLevel_High: Tamper pin active on high level
     94          *                       - BKP_TamperPinLevel_Low: Tamper pin active on low level
     95          * Output         : None
     96          * Return         : None
     97          *******************************************************************************/
     98          void BKP_TamperPinLevelConfig(u16 BKP_TamperPinLevel)
     99          {
    100            /* Check the parameters */
    101            assert(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
    102          
    103            *(vu32 *) CR_TPAL_BB = BKP_TamperPinLevel;
    104          }
    105          
    106          /*******************************************************************************
    107          * Function Name  : BKP_TamperPinCmd
    108          * Description    : Enables or disables the Tamper Pin activation.
    109          * Input          : - NewState: new state of the Tamper Pin activation.
    110          *                    This parameter can be: ENABLE or DISABLE.
    111          * Output         : None
    112          * Return         : None
    113          *******************************************************************************/
    114          void BKP_TamperPinCmd(FunctionalState NewState)
    115          {
    116            /* Check the parameters */
    117            assert(IS_FUNCTIONAL_STATE(NewState));
    118          
    119            *(vu32 *) CR_TPE_BB = (u32)NewState;
    120          }
    121          
    122          /*******************************************************************************
    123          * Function Name  : BKP_ITConfig
    124          * Description    : Enables or disables the Tamper Pin Interrupt.
    125          * Input          : - NewState: new state of the Tamper Pin Interrupt.
    126          *                    This parameter can be: ENABLE or DISABLE.
    127          * Output         : None
    128          * Return         : None
    129          *******************************************************************************/
    130          void BKP_ITConfig(FunctionalState NewState)
    131          {
    132            /* Check the parameters */
    133            assert(IS_FUNCTIONAL_STATE(NewState));
    134          
    135            *(vu32 *) CSR_TPIE_BB = (u32)NewState;
    136          }
    137          
    138          /*******************************************************************************
    139          * Function Name  : BKP_RTCCalibrationClockOutputCmd
    140          * Description    : Enables or disables the output of the Calibration Clock.
    141          * Input          : - NewState: new state of the Calibration Clock output.
    142          *                    This parameter can be: ENABLE or DISABLE.
    143          * Output         : None
    144          * Return         : None
    145          *******************************************************************************/
    146          void BKP_RTCCalibrationClockOutputCmd(FunctionalState NewState)
    147          {
    148            /* Check the parameters */
    149            assert(IS_FUNCTIONAL_STATE(NewState));
    150          
    151            *(vu32 *) RTCCR_CCO_BB = (u32)NewState;
    152          }
    153          
    154          /*******************************************************************************
    155          * Function Name  : BKP_SetRTCCalibrationValue
    156          * Description    : Sets RTC Clock Calibration value.
    157          * Input          : - CalibrationValue: specifies the RTC Clock Calibration value.
    158          *                    This parameter must be a number between 0 and 0x7F.
    159          * Output         : None
    160          * Return         : None
    161          *******************************************************************************/
    162          void BKP_SetRTCCalibrationValue(u8 CalibrationValue)
    163          {
    164            u16 tmpreg = 0;
    165          
    166            /* Check the parameters */
    167            assert(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
    168          
    169            tmpreg = BKP->RTCCR;
    170          
    171            /* Clear CAL[6:0] bits */
    172            tmpreg &= RTCCR_CAL_Mask;
    173          
    174            /* Set CAL[6:0] bits according to CalibrationValue value */
    175            tmpreg |= CalibrationValue;
    176          
    177            /* Store the new value */
    178            BKP->RTCCR = tmpreg;
    179          }
    180          
    181          /*******************************************************************************
    182          * Function Name  : BKP_WriteBackupRegister
    183          * Description    : Writes user data to the specified Data Backup Register.
    184          * Input          : - BKP_DR: specifies the Data Backup Register.
    185          *                    This parameter can be BKP_DRx where x:[1, 10]
    186          *                  - Data: data to write
    187          * Output         : None
    188          * Return         : None
    189          *******************************************************************************/
    190          void BKP_WriteBackupRegister(u16 BKP_DR, u16 Data)
    191          {
    192            /* Check the parameters */
    193            assert(IS_BKP_DR(BKP_DR));
    194          
    195            *(vu16 *) (BKP_BASE + BKP_DR) = Data;
    196          }
    197          
    198          /*******************************************************************************
    199          * Function Name  : BKP_ReadBackupRegister
    200          * Description    : Reads data from the specified Data Backup Register.
    201          * Input          : - BKP_DR: specifies the Data Backup Register.
    202          *                    This parameter can be BKP_DRx where x:[1, 10]
    203          * Output         : None
    204          * Return         : The content of the specified Data Backup Register
    205          *******************************************************************************/
    206          u16 BKP_ReadBackupRegister(u16 BKP_DR)
    207          {
    208            /* Check the parameters */
    209            assert(IS_BKP_DR(BKP_DR));
    210          
    211            return (*(vu16 *) (BKP_BASE + BKP_DR));
    212          }
    213          
    214          /*******************************************************************************
    215          * Function Name  : BKP_GetFlagStatus
    216          * Description    : Checks whether the Tamper Pin Event flag is set or not.
    217          * Input          : None
    218          * Output         : None
    219          * Return         : The new state of the Tamper Pin Event flag (SET or RESET).
    220          *******************************************************************************/
    221          FlagStatus BKP_GetFlagStatus(void)
    222          {
    223            return (FlagStatus)(*(vu32 *) CSR_TEF_BB);
    224          }
    225          
    226          /*******************************************************************************
    227          * Function Name  : BKP_ClearFlag
    228          * Description    : Clears Tamper Pin Event pending flag.
    229          * Input          : None
    230          * Output         : None
    231          * Return         : None
    232          *******************************************************************************/
    233          void BKP_ClearFlag(void)
    234          {
    235            /* Set CTE bit to clear Tamper Pin Event flag */
    236            BKP->CSR |= CSR_CTE_Set;
    237          }
    238          
    239          /*******************************************************************************
    240          * Function Name  : BKP_GetITStatus
    241          * Description    : Checks whether the Tamper Pin Interrupt has occurred or not.
    242          * Input          : None
    243          * Output         : None
    244          * Return         : The new state of the Tamper Pin Interrupt (SET or RESET).
    245          *******************************************************************************/
    246          ITStatus BKP_GetITStatus(void)
    247          {
    248            return (ITStatus)(*(vu32 *) CSR_TIF_BB);
    249          }
    250          
    251          /*******************************************************************************
    252          * Function Name  : BKP_ClearITPendingBit
    253          * Description    : Clears Tamper Pin Interrupt pending bit.
    254          * Input          : None
    255          * Output         : None
    256          * Return         : None
    257          *******************************************************************************/
    258          void BKP_ClearITPendingBit(void)
    259          {
    260            /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
    261            BKP->CSR |= CSR_CTI_Set;
    262          }
    263          
    264          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     BKP_ClearFlag                      0
     BKP_ClearITPendingBit              0
     BKP_DeInit                         4
     BKP_GetFlagStatus                  0
     BKP_GetITStatus                    0
     BKP_ITConfig                       8
     BKP_RTCCalibrationClockOutputCmd
                                        8
     BKP_ReadBackupRegister             8
     BKP_SetRTCCalibrationValue         8
     BKP_TamperPinCmd                   8
     BKP_TamperPinLevelConfig           8
     BKP_WriteBackupRegister           12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     BKP_DeInit                       16
     BKP_TamperPinLevelConfig         32
     BKP_TamperPinCmd                 32
     BKP_ITConfig                     32
     BKP_RTCCalibrationClockOutputCmd
                                      32
     BKP_SetRTCCalibrationValue       48
     BKP_WriteBackupRegister          60
     BKP_ReadBackupRegister           62
     BKP_GetFlagStatus                16
     BKP_ClearFlag                    18
     BKP_GetITStatus                  16
     BKP_ClearITPendingBit            18
     ??DataTable9                      4
     ??DataTable10                     4
     ??DataTable14                     4
     ?<Constant "C:\\David JIANG\\ST MCU...">
                                      88
      Others                          16

 
 410 bytes in segment CODE
  88 bytes in segment DATA_C
 
 394 bytes of CODE  memory (+ 16 bytes shared)
  88 bytes of CONST memory

Errors: none
Warnings: none
